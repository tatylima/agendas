// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  cpf      String  @unique
  email    String  @unique
  password String
  image    String
  isAdmin  Boolean @default(false) @map("is_admin")
  profile Profile[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders Order[]
  @@map("user")
}

model Profile {
  id    String @id @default(uuid())
  name  String
  image String

  favorite Favorite?
  products Product[]
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @map("user_id")
 
  @@map("profile")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Float
  image       String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?   @map("category_id")

  favorites Favorite[]
  profile Profile[]
  orders OrderToProduct[]

  @@map("product")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]
  
  @@map("category")
}

model Favorite {
 id String @id @default(uuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @map("profile_id") @unique
  products Product[]
  
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @map("user_id")

  products OrderToProduct[]

  @@map("order")
}

model OrderToProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?  @map("product_id")

  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId String? @map("order_id")

  quantity Int

  @@map("order_to_product")
}